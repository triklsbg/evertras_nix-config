* nix-systems
:PROPERTIES:
:CUSTOM_ID: nix-systems
:END:
All my Nix systems and home-manager config.

[[https://github.com/Evertras/nix-systems/assets/5923958/e56307ec-d4a5-4cfa-8ae9-492eefee684a]]

** Using this
:PROPERTIES:
:CUSTOM_ID: using-this
:END:
For regular system updates, just run =make system=.

For updating just home, run =make home= or just =make=.

For bootstrapping a fresh NixOS install as root:

#+begin_src sh
nix-shell -p git gnumake
git clone https://github.com/Evertras/nix-systems
cd nix-systems
make system
# Specify actual desired user here
sudo -u evertras make home EVERTRAS_USER_PROFILE="some-profile-name"
# Set user profile here, direnv will use this later outside of root
cp .envrc.example .envrc
reboot now
#+end_src

*** Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:
**** No suitable profile directory error message
:PROPERTIES:
:CUSTOM_ID: no-suitable-profile-directory-error-message
:END:
#+begin_src text
Could not find suitable profile directory, tried /home/evertras/.local/state/home-manager/profiles and /nix/var/nix/profiles/per-user/evertras
#+end_src

#+begin_src sh
# The error message is misleading, make this directory
mkdir -p ~/.local/state/nix/profiles/
#+end_src

**** OpenGL issues when only using home
:PROPERTIES:
:CUSTOM_ID: opengl-issues-when-only-using-home
:END:
When running on a non-NixOS machine, problems may happen with OpenGL
such as with Kitty.

Use [[https://github.com/nix-community/nixGL][nixGL]] to get around
this.

#+begin_src sh
nixGL kitty
#+end_src

** Random todos for later
:PROPERTIES:
:CUSTOM_ID: random-todos-for-later
:END:
- Explore better
  [[https://github.com/NixOS/nixpkgs/blob/master/lib/types.nix][types]]
  like nonEmptyString
- More enum checks with asserts for things like desktop as "i3"

** Font list
:PROPERTIES:
:CUSTOM_ID: font-list
:END:
I get bored with fonts so here's a list of the nerd fonts that I
actually like, as a reminder to myself.

*** Clean
:PROPERTIES:
:CUSTOM_ID: clean
:END:
For just focusing.

**** Standard
:PROPERTIES:
:CUSTOM_ID: standard
:END:
Go-tos

- CaskaydiaCove - Solid baseline when all else fails, bit wider
- Hasklug - Default go-to for ligatures, clean

**** Alternatives
:PROPERTIES:
:CUSTOM_ID: alternatives
:END:
Feeling different but still "boring".

- AurulentSansM - Soft/clean, not sure if I like 0 without dot
- BitstromWera - Clean/simple
- CodeNewRoman - Clean/simple
- Cousine - Clear, simple
- JetBrainsMono - Clean, ligatures
- Literation - Wider
- OverpassM - Thinner, simple
- RobotoMono - Clean, simple
- UbuntuMono - Feels like Ubuntu, yep

*** Fun/different
:PROPERTIES:
:CUSTOM_ID: fundifferent
:END:
To change it up.

- Agave Nerd - kind of old school sharp feel
- ComicShannsMono - Casual and surprisingly nice to read
- FantasqueSansM - Bit whimsical
- Gohu Font 14 - Pixel font, sharp at size 14 - can use 11 as well for
  tiny readable font
- Hurmit - Fun change in small doses
- Iosevka - Feels squished horizontally but still clean
- Monofur - Thin stroke with round characters
- Monoid - Bigger, but ligatures
- Mononoki - Just feels different, hard to describe
- OpenDyslexicM - Weirdly stroked characters, wider
- ProFont IIx - Pixel font, nicely sharp
- ProggyClean - Works for very small font sizes, not great at larger
- ShureTechMono - Bit squished, hard to describe
- SpaceMono - Extra space between lines
- Terminess - Works nicely for windows/titles but not so much terminal

** Stupid nix tricks
:PROPERTIES:
:CUSTOM_ID: stupid-nix-tricks
:END:
*** Build a VM image to test
:PROPERTIES:
:CUSTOM_ID: build-a-vm-image-to-test
:END:
#+begin_src sh
# Build it as a VM, then run the output link it gives
nixos-rebuild build-vm --flake .#HOSTNAME

# Alternatively using nix command
nix build '.#nixosConfigurations.HOSTNAME.config.system.build.vm'

# Or just run it directly
nix run '.#nixosConfigurations.HOSTNAME.config.system.build.vm'

# Run it without even cloning this repo
nix run 'github:Evertras/nix-systems#nixosConfigurations.HOSTNAME.config.system.build.vm'
#+end_src
